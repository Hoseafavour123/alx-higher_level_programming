========================
How to use 1-my_list.txt
========================

This module defines a class 'MyClass' that inherits from 'list'

Instantiation
=============

MyList can be instantiated with no arguments which will return an empty list
:::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> print(my_list)
    []


Or a single argument which must be iterable:
:::

    >>> my_list = MyList([3, 2, 1])
    >>> print(my_list)
    [3, 2, 1]

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    ...
    TypeError: 'NoneType' object is not iterable


A TypeError is raised if more than one argument is passed
:::

    >>> my_list = MyList([1, 2, 3], [4, 2])
    Traceback (most recent call last):
    ...
    TypeError: list expected at most 1 argument, got 2


Usage
=====

MyList is an inherited class and thus all parent class methods can be applied on
an instance, for example:

:::
    
    >>> my_list = MyList()
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(5)
    >>> print(my_list)
    [3, 2, 5]

Index replacement work as normal
:::

    >>> my_list[1] = 12
    >>> print(my_list)
    [3, 12, 5]

Remove with remove() method
:::

    >>> my_list.remove(12)
    >>> print(my_list)
    [3, 5]

See the official Python documentation on the various list methods available


'print_sorted' Method
=====================

'MyList' implements a public instance method: 'print_sorted(self)'

:::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>


The method takes no argument:
:::

    >>> my_list = MyList()
    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

The method prints the list in ascending order
:::

    >>> my_list.append(5)
    >>> my_list.append(1)
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(4)
    >>> print(my_list)
    [5, 1, 3, 2, 4]

::
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

The order of the list is not altered after the method is called
:::

    >>> print(my_list)
    [5, 1, 3, 2, 4]


A list of strings are sorted lexicographically:
:::

    >>> my_list = MyList()
    >>> my_list.append('I')
    >>> my_list.append('Love')
    >>> my_list.append('Astronomy')
    >>> print(my_list)
    ['I', 'Love', 'Astronomy']

::
    >>> my_list.print_sorted()
    ['Astronomy', 'I', 'Love']

Nothing to sort for empty lists
:::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If 'print_sorted' is called on a list of different types, a TypeError is raised
:::

    >>> my_list = MyList([1, "Astronomy", "Tonzai", 3])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    ...
    TypeError: '<' not supported between instances of 'str' and 'int'
